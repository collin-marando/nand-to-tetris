// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructionructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instructionruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instructionruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instructionantaneously by the execution of the current 
 * instructionruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instructionruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instructionruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], 		 // instructionruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in=instruction[15], out=isainst);
	
	//ALU & input
	Mux16(a=aout, b=inM, sel=instruction[12], out=AMout);
    ALU(x=dout, y=AMout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zr, ng=ng);
	
	//Registers
	Mux16(a[0..14]=instruction[0..14], b=aluout, sel=instruction[15], out=ain);
	Or(a=instruction[5], b=isainst, out=aload);
	ARegister(in=ain, load=aload, out=aout, out[0..14]=addressM);
	And(a=instruction[4], b=instruction[15], out=dload);
	DRegister(in=aluout, load=dload, out=dout);
	
	//Jumping
	Or(a=zr, b=ng, out=zon);
	Not(in=zon, out=notzon);
	Not(in=zr, out=nzr);
	Not(in=ng, out=nng);
	Mux8Way16(a[0]=false, b[0]=notzon, c[0]=zr, d[0]=nng, e[0]=ng, f[0]=nzr, g[0]=zon, h[0]=true, sel=instruction[0..2], out[0]=jumpcond);
	And(a=jumpcond, b=instruction[15], out=jump);
	PC(in=aout, load=jump, inc=true, reset=reset, out[0..14]=pc);
	
	//Write M
	Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);
}